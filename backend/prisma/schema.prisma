generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Track {
  id         Int      @id @default(autoincrement())
  spotifyId  String?  @unique
  title      String
  artistName String?
  albumName  String?
  duration   Int?
  previewUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Rating     Rating[]
  Like       Like[]
  Comment    Comment[]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String?
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatarUrl String?

  // Relations
  oauthAccounts UserOAuth[]
  following     Follow[]    @relation("UserFollows")
  followers     Follow[]    @relation("UserFollowedBy")
  Rating        Rating[]
  Like          Like[]
  Comment       Comment[]
}

model UserOAuth {
  id             Int       @id @default(autoincrement())
  userId         Int
  provider       String
  providerUserId String
  accessToken    String?
  refreshToken   String?
  tokenExpires   DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
}

model Follow {
  id         Int      @id @default(autoincrement())
  followerId Int // utilisateur qui suit
  followedId Int // utilisateur suivi
  createdAt  DateTime @default(now())

  // Relations
  follower User @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  followed User @relation("UserFollowedBy", fields: [followedId], references: [id], onDelete: Cascade)

  @@unique([followerId, followedId])
  @@index([followerId])
  @@index([followedId])
}

model Rating {
  id        Int      @id @default(autoincrement())
  userId    Int
  trackId   Int
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  trackId   Int
  createdAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  trackId   Int
  content   String
  createdAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@index([trackId])
  @@index([userId])
}

model Action {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
